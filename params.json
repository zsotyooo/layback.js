{"name":"Layback.js","tagline":"Dare to be lazy! Create your javascript, add features to it, and make it reusable for the next time.","body":"# layback.js\r\n\r\nAs a developer I always kept reusability in mind.\r\n\r\nIn my everyday work I kept facing the same issues when I had to create some simple javascript code:\r\n\r\n> I should be able to somehow pass settings to my object...\r\n> Reaching the dom objects would be nice...\r\n> I should be able to use events observers...\r\n> I can make it as a jQuery plugin with some extra work...\r\n> I have items inside...\r\n> Oh, it should work a different way on mobile...\r\n> Wait, haven't I already done these things before?\r\n\r\nSo I started thinking. I need a simple, lightweight solution to enpower my javascript objects with different kind of features.\r\nSomething like this would be nice:\r\n```javascript\r\nvar MyClass = function(options) {\r\n    this.layback(options);\r\n    \r\n    // Do my stuff here\r\n}\r\n\r\nlayback(MyClass) // At this pont I have data access, observer implementation, and dom access\r\n    .defaults({\r\n        data: {\r\n            dummy: 'foo',\r\n            something: 'cool'\r\n        },\r\n        dom: {\r\n            body: 'body'\r\n        }\r\n    })\r\n    .use('jQuery-plugin', 'myPlugin') // myPlugin jQuery plugin created\r\n    .use('collection') // items and collection methods added\r\n    .make();\r\n```\r\n\r\n# Documentation\r\n\r\n## Applying layback to your functions\r\nThere are two ways to apply the layback features to your function.\r\n#### Adding feautres after creating a function\r\n```javascript\r\nvar Creature = function (properties) {\r\n    this.layback(properties);\r\n    this.eat = function() {\r\n        this.dispatch('before-eating');\r\n        this.set('hunger', this.get('hunger')-1);\r\n        this.set('stamina', this.get('stamina')+1);\r\n        this.dispatch('after-eating');\r\n        return this;\r\n    }\r\n}\r\nlayback(Creature).make();\r\n\r\nvar creature = new Creature({hunger: 100, stamina: 10});\r\ncreature.eat().get('hunger'); // 99\r\ncreature.get('stamina'); // 11\r\n```\r\n#### Creating a function via layback\r\n*Note that the Function will be created globally accessable (in window)*\r\n```javascript\r\nlayback('Creature', function (properties) {\r\n    this.layback(properties);\r\n    this.eat = function() {\r\n        //...\r\n    }\r\n}).make();\r\n//...\r\n```\r\n#### Accessing layback features of a function that already uses layback\r\n```javascript\r\nlayback(Creature); // => Layback object for the class\r\nCreature.layback(); // Alternative way of getting it\r\n//...\r\n```\r\n#### Accessing layback features of an object that already uses layback\r\n```javascript\r\nvar cat = new Creature;\r\nlayback(cat) // => Layback object for the object\r\ncat.layback() // Alternative way of getting it\r\n//...\r\n```\r\n## Data handling\r\nData handling is pretty simple. You can set default values for all the data you'd like to use, and you can use them pretty flexible.\r\n### Setting the default data\r\nThe default data sets defaults values to all the data accessable inside the object. You can do it by calling the `defaults` function while adding the layback features.\r\n```javascript\r\nlayback('Creature', function(properties) {\r\n    // You can set Default data for the object here. It overrides the default data on the class\r\n    // Note that the format is like this: 'laybackNamespace'\r\n    this.laybackData = {\r\n        hunger: 1\r\n    };\r\n    this.layback(properties);\r\n})\r\n.defaults({ // Set default data on the class\r\n    data: { // This is a data namespace (explained later)\r\n        hunger: 0,\r\n        stamina: 100\r\n    }\r\n})\r\n.make();\r\nvar creature = new Creature();\r\ncreature.get('hunger'); // 1\r\ncreature.get('stamina'); // 100\r\n```\r\n### Adding your own data namespace\r\n```javascript\r\nlayback('Creature', function(properties) {\r\n    // You can set Default data for the object here. It overrides the default data on the class\r\n    // Note that the format is like this: 'laybackNamespace'\r\n    this.skinData = {\r\n        hasHair: false\r\n    };\r\n    this.layback(properties)\r\n        .addNs('skinData');\r\n    \r\n    this.skinData; // Object {color:'brown', hasHair: false}\r\n})\r\n.defaults({ // Set default data on the class\r\n    skinData: { // This is your namespace\r\n        color: 'brown',\r\n        hasHair: true\r\n    }\r\n})\r\n.make();\r\n```\r\n\r\n## The treats\r\nThe treats are adding extra features to your function. This is the heart of layback.js.\r\n\r\nThere are 2 different kinds of treats:\r\n* **Sytem treats:** Automatically applied on your function when you call `.make()`.\r\n* **Optional treats:** You have to add them yourselves by calling the `.use(treatName)` function.\r\n\r\n### Data treat (system)\r\nIt allows you to access data inside the object, it also automatically handles the options you pass to the `this.layback(options)` function.\r\n#### Added features\r\n* `get(dataName, [default])`: It gets a data. If it doesnt exist can get the `default` value back.\r\n* `set(dataName, dataValue)`: It sets a data with the key on `dataName`, and the value of `dataValue`.\r\n\r\n#### Example usage\r\n```javascript\r\nlayback('Creature', function(properties) {\r\n    // You can set/overwrite some default data here as well.\r\n    // It comes in handy when you have to do some pre calculations\r\n    this.laybackData = {\r\n        stamina: Math.round(Math.random() * 100)\r\n    };\r\n    this.layback(properties);\r\n    //...\r\n})\r\n.defaults({\r\n    data: {\r\n        hunger: 0,\r\n        stamina: 100\r\n    }\r\n})\r\n.make();\r\n\r\nvar creature1 = new Creature; // Using the default data only\r\ncreature1.get('hunger'); // 0\r\ncreature1.get('stamina'); // 1..100 random number\r\n\r\nvar creature2 = new Creature({hunger: 50}); // Using custom options\r\ncreature2.get('hunger'); // 50\r\ncreature2.get('stamina'); // 1..100 random number\r\n```\r\n### Event treat (system)\r\nIt's a simple observer implementation.\r\n#### Added features\r\n* `dispatch(eventName, [eventData])`: It fires an avent with `eventName`, and you can dispatch exra data by using the `eventData` argument.\r\n* `observe(eventName, observerFunction)`: It observes the `eventName` event.\r\nThe observerFunction recieves the `observee` object, and the `eventData`.\r\n\r\n#### Using default observers\r\n```javascript\r\nlayback('Creature', function(properties) {\r\n    // You can set/overwrite some default observers here as well\r\n    // It comes in handy when you have to do some pre calculations\r\n    this.laybackCallbacks = {\r\n        'after-stop-walking': {\r\n            toDo: function(obj, nextAction){// you can add more observers to the same event\r\n                obj.set('nextAction', nextAction);\r\n            }\r\n        }\r\n    }\r\n    this.layback(properties);\r\n    \r\n    this.startWalking = function() {\r\n        this.set('walking', true);\r\n        this.dispatch('after-start-walking');\r\n    }\r\n    \r\n    this.stopWalking = function(nextAction) {\r\n        this.set('walking', false);\r\n        this.dispatch('after-stop-walking', nextAction);\r\n    }\r\n    \r\n    //...\r\n})\r\n.defaults({\r\n    data: {\r\n        legs: 0\r\n    },\r\n    callbacks: {\r\n        'after-start-walking': {\r\n            canWalk: function(obj, data) {\r\n                if (obj.get('legs') == 0) {\r\n                    obj.stopWalking('idling');\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n.make();\r\n\r\nvar fish = new Creature({legs: 0});\r\nfish.startWalking(); // The observer has stopped the walking\r\nfish.get('walking'); // false\r\nfish.get('nextAction'); // idling\r\n\r\nvar cat = new Creature({legs: 4});\r\ncat.startWalking(); // The observer has not stopped the walking\r\ncat.get('walking'); // true\r\n```\r\n#### Using observers on-the-fly\r\n```javascript\r\ncat.observe('after-start-walking', function(obj) {\r\n    obj.liftTail();\r\n});\r\n```\r\n#### Using observers via options\r\n```javascript\r\nlayback(Creature).make();\r\nvar cat = new Creature({\r\n    legs: 4,\r\n    onAfterStartWalking: function(obj) { // Note that I added 'on' and camelised the event name\r\n        obj.liftTail();\r\n    }\r\n});\r\n```\r\n### DOM treat (system)\r\nYou can access the DOM. *It uses jQuery!*\r\n#### Added features\r\n* `dom(elementName [, parentElement])`: gives you a DOM element with the given name (passed as a dom data).\r\n\r\n### Using DOM via defaults\r\n```javascript\r\nlayback('Creature', function(properties){\r\n    // Set/overwrite defaults here\r\n    this.laybackDom = {\r\n        infoContainer: $(\"<p class='new-info'></p>\").appendTo('body') // note that now it's a jQuery element, not only a selector\r\n    }\r\n    //...\r\n    this.layback(properties);\r\n    \r\n    this.showMood = function(txt) {\r\n        this.dom('infoContainer').html(txt);\r\n    }\r\n    \r\n    this.say = function(txt) {\r\n        this.dom('talkContainer').append($(\"<p>\" + txt + \"</p>\"));\r\n    }\r\n}).defaults({\r\n    dom: {\r\n        infoContainer: 'p.info',\r\n        talkContainer: '.talk'\r\n    }\r\n})\r\n.make();\r\nvar cat = new Creature;\r\ncat.showMood('The cat is hungry!'); // The text appears in p.new-info\r\ncat.say('Feed me!'); // The text appears in .talk\r\n```\r\n### Using DOM via options\r\n```javascript\r\nvar dog = new Creature({\r\n    talkContainerElement: '.talk-dog' // Note that I added 'Element' after the dom key\r\n});\r\ndog.showMood('The dog is sad!'); // The text appears in p.new-info\r\ncat.say('Play with me!'); // The text appears in .talk-dog\r\n```\r\n### SetGet treat (optional)\r\nThe setget treat provides shorthand setters and getters for your object.\r\nThe setters/getters work as explained in the Data treat section.\r\n*It works only with the data provided as default data as well!*\r\n#### Example usage\r\n```javascript\r\nlayback(Creature)\r\n.defaults({\r\n    data: {\r\n        legs: 4,\r\n        canSwim: true\r\n    }\r\n})\r\n.use('setget')\r\n.make();\r\n\r\nvar fish = new Creature;\r\nfish.setLegs(0);\r\nfish.getLegs(); // 0\r\n\r\nvar cat = new Creature;\r\ncat.setCanSwim(false);\r\ncat.getCanSwim(); // false\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}